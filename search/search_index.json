{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Amplifier - .NET Core SaaS Application Toolkit Amplifier is a toolkit for building .NET Core Software As A Service (SaaS) applications. It provides interfaces and middlewares to easily add multi-tenant, auditing and soft delete capabilities to your ASP.NET Core applications. You can add Amplifier to your new/existing project or use the Amplifier Starter template. Amplifier is an open source project and published under MIT license . The table of contents in the left sidebar should let you easily access the documentation for your topic of interest. You can also use the search function in the top navigation bar. Note Amplifier is an open source project developed by volunteers. You can help us to improve the project including documentation. Feel free to submit an issue or pull request on the GitHub repository , help us translating present documentation into your language, or discuss with us on the project Gitter channel . How Amplifier works The goal of the project is to provide an easy way to create .NET Core SaaS (software as a service) applications offering features like multi-tenancy, automatic auditing, and soft delete support. We currently only support the Entity Framework Core ORM. We plan to support other ORMs (such as Dapper) in the future. See how Amplifier works in details. Contributing Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us. Versioning We use SemVer for versioning. For the versions available, see the tags on this repository . Authors Fabri Damazio - fabridamazio@gmail.com","title":"Introduction"},{"location":"#amplifier-net-core-saas-application-toolkit","text":"Amplifier is a toolkit for building .NET Core Software As A Service (SaaS) applications. It provides interfaces and middlewares to easily add multi-tenant, auditing and soft delete capabilities to your ASP.NET Core applications. You can add Amplifier to your new/existing project or use the Amplifier Starter template. Amplifier is an open source project and published under MIT license . The table of contents in the left sidebar should let you easily access the documentation for your topic of interest. You can also use the search function in the top navigation bar. Note Amplifier is an open source project developed by volunteers. You can help us to improve the project including documentation. Feel free to submit an issue or pull request on the GitHub repository , help us translating present documentation into your language, or discuss with us on the project Gitter channel .","title":"Amplifier - .NET Core SaaS Application Toolkit"},{"location":"#how-amplifier-works","text":"The goal of the project is to provide an easy way to create .NET Core SaaS (software as a service) applications offering features like multi-tenancy, automatic auditing, and soft delete support. We currently only support the Entity Framework Core ORM. We plan to support other ORMs (such as Dapper) in the future. See how Amplifier works in details.","title":"How Amplifier works"},{"location":"#contributing","text":"Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us.","title":"Contributing"},{"location":"#versioning","text":"We use SemVer for versioning. For the versions available, see the tags on this repository .","title":"Versioning"},{"location":"#authors","text":"Fabri Damazio - fabridamazio@gmail.com","title":"Authors"},{"location":"how-it-works/","text":"How it works To make the process of creating SaaS applications easy, Amplifier provides interfaces that your classes must implement to enable features such as multi-tenant support, auditing, and soft delete automatically. Interfaces Multi-tenant interfaces IHaveTenant - Implement this interface for an entity which must have a non-nullable TenantId. IMayHaveTenant - Implement this interface for an entity which must have a nullable TenantId. ITenantFilter - Implement this interface for an entity that must be globally filtered by Tenant Id. IUserSession - Interface that represents a user session. Auditing interfaces IFullAuditedEntity - Implement this interface for an entity that must be fully audited (Creation, deletion, updating times and users). ISoftDelete - Implement this interface for an entity that must be soft deleted. UserSession middleware After authenticated by your application, UserSession middleware will set the properties from the values in the ClaimsPrincipal found in context.User in your UserSession class. Entity Framework Core implementation Shadow Properties Amplifier Entity Framework Core implementation uses shadow properties to add properties to entities that implement any of the interfaces listed above. Shadow Properties Shadow properties are properties that are not defined in your .NET entity class but are defined for that entity type in the EF Core model. The value and state of these properties are maintained purely in the Change Tracker. Shadow properties are useful when there is data in the database that should not be exposed on the mapped entity types. To learn more about shadow properties, visit the Microsoft Docs . IHaveTenant interface adds a TenantId shadow property. IMayHaveTenant interface adds a nullable TenantId shadow property. IFullAuditedEntity interface adds a CreationTime, CreationUser, LastModificationTime, LastModificationUser, DeletionTime, DeletionUser shadow properties. ISoftDelete adds an IsDeleted shadow property. Global Query Filters Using global query filters, Amplifier can filter your entities based on their shadow properties. To be filtered by TenantId, an entity needs to implement ITenantFilter interface. Models can have an ownership hierarchy with many levels deep and filtering by TenantId on each level can degrade performance. Only root classes need to implement this interface since their children are safely joined to their parents via other properties. Global Query Filters Global query filters are LINQ query predicates (a boolean expression typically passed to the LINQ Where query operator) applied to Entity Types in the metadata model (usually in OnModelCreating). Such filters are automatically applied to any LINQ queries involving those Entity Types, including Entity Types referenced indirectly, such as through the use of Include or direct navigation property references. To learn more about global query filters, visit the Microsoft Docs .","title":"How it works"},{"location":"how-it-works/#how-it-works","text":"To make the process of creating SaaS applications easy, Amplifier provides interfaces that your classes must implement to enable features such as multi-tenant support, auditing, and soft delete automatically.","title":"How it works"},{"location":"how-it-works/#interfaces","text":"","title":"Interfaces"},{"location":"how-it-works/#multi-tenant-interfaces","text":"IHaveTenant - Implement this interface for an entity which must have a non-nullable TenantId. IMayHaveTenant - Implement this interface for an entity which must have a nullable TenantId. ITenantFilter - Implement this interface for an entity that must be globally filtered by Tenant Id. IUserSession - Interface that represents a user session.","title":"Multi-tenant interfaces"},{"location":"how-it-works/#auditing-interfaces","text":"IFullAuditedEntity - Implement this interface for an entity that must be fully audited (Creation, deletion, updating times and users). ISoftDelete - Implement this interface for an entity that must be soft deleted.","title":"Auditing interfaces"},{"location":"how-it-works/#usersession-middleware","text":"After authenticated by your application, UserSession middleware will set the properties from the values in the ClaimsPrincipal found in context.User in your UserSession class.","title":"UserSession middleware"},{"location":"how-it-works/#entity-framework-core-implementation","text":"","title":"Entity Framework Core implementation"},{"location":"how-it-works/#shadow-properties","text":"Amplifier Entity Framework Core implementation uses shadow properties to add properties to entities that implement any of the interfaces listed above. Shadow Properties Shadow properties are properties that are not defined in your .NET entity class but are defined for that entity type in the EF Core model. The value and state of these properties are maintained purely in the Change Tracker. Shadow properties are useful when there is data in the database that should not be exposed on the mapped entity types. To learn more about shadow properties, visit the Microsoft Docs . IHaveTenant interface adds a TenantId shadow property. IMayHaveTenant interface adds a nullable TenantId shadow property. IFullAuditedEntity interface adds a CreationTime, CreationUser, LastModificationTime, LastModificationUser, DeletionTime, DeletionUser shadow properties. ISoftDelete adds an IsDeleted shadow property.","title":"Shadow Properties"},{"location":"how-it-works/#global-query-filters","text":"Using global query filters, Amplifier can filter your entities based on their shadow properties. To be filtered by TenantId, an entity needs to implement ITenantFilter interface. Models can have an ownership hierarchy with many levels deep and filtering by TenantId on each level can degrade performance. Only root classes need to implement this interface since their children are safely joined to their parents via other properties. Global Query Filters Global query filters are LINQ query predicates (a boolean expression typically passed to the LINQ Where query operator) applied to Entity Types in the metadata model (usually in OnModelCreating). Such filters are automatically applied to any LINQ queries involving those Entity Types, including Entity Types referenced indirectly, such as through the use of Include or direct navigation property references. To learn more about global query filters, visit the Microsoft Docs .","title":"Global Query Filters"},{"location":"quick-start/","text":"Quick Start Amplifier is available through NuGet packages at Nuget.org Installation For now, we only support .Net Core projects using Entity Framework Core and ASP.NET Core Identity: PM> Install-Package Amplifier.AspNetCore PM> Install-Package Amplifier.EntityFrameworkCore Configuration Add Amplifier in Startup.cs : public void ConfigureServices ( IServiceCollection services ) { //... services . AddAmplifier (); //... } public void Configure ( IApplicationBuilder app , IHostingEnvironment env ) { //... app . UseAmplifier < int >(); //... } Project DbContext needs inherit from IdentityDbContextBase<TTenant, TUser, TRole, TKey> : public class ApplicationDbContext : IdentityDbContextBase < Tenant , User , Role , int > { private readonly IUserSession < int > _userSession ; public ApplicationDbContext ( DbContextOptions < ApplicationDbContext > options , IUserSession < int > userSession ) : base ( options , userSession ) { _userSession = userSession ; } // DbSets.... } Project User class needs inherit from IdentityUser , the Tenant class from TenantBase and the Role class from IdentityRole . Using Just Apply these interfaces: IMayHaveTenant - for classes that may have a Tenant Id. IHaveTenant - for classes that have Tenant Id. ITenantFilter - for classes that should be filtered by Tenant Id. IFullAuditedEntity - for classes that needs be audited (creation, deletion and last modified time and user). ISoftDelete - for classes that should be soft deleted.","title":"Quick Start"},{"location":"quick-start/#quick-start","text":"Amplifier is available through NuGet packages at Nuget.org","title":"Quick Start"},{"location":"quick-start/#installation","text":"For now, we only support .Net Core projects using Entity Framework Core and ASP.NET Core Identity: PM> Install-Package Amplifier.AspNetCore PM> Install-Package Amplifier.EntityFrameworkCore","title":"Installation"},{"location":"quick-start/#configuration","text":"Add Amplifier in Startup.cs : public void ConfigureServices ( IServiceCollection services ) { //... services . AddAmplifier (); //... } public void Configure ( IApplicationBuilder app , IHostingEnvironment env ) { //... app . UseAmplifier < int >(); //... } Project DbContext needs inherit from IdentityDbContextBase<TTenant, TUser, TRole, TKey> : public class ApplicationDbContext : IdentityDbContextBase < Tenant , User , Role , int > { private readonly IUserSession < int > _userSession ; public ApplicationDbContext ( DbContextOptions < ApplicationDbContext > options , IUserSession < int > userSession ) : base ( options , userSession ) { _userSession = userSession ; } // DbSets.... } Project User class needs inherit from IdentityUser , the Tenant class from TenantBase and the Role class from IdentityRole .","title":"Configuration"},{"location":"quick-start/#using","text":"Just Apply these interfaces: IMayHaveTenant - for classes that may have a Tenant Id. IHaveTenant - for classes that have Tenant Id. ITenantFilter - for classes that should be filtered by Tenant Id. IFullAuditedEntity - for classes that needs be audited (creation, deletion and last modified time and user). ISoftDelete - for classes that should be soft deleted.","title":"Using"}]}